{"version":3,"sources":["SettingsDisplay.tsx","Button.tsx","Display.tsx","bll/counter-reducer.ts","App.tsx","reportWebVitals.ts","bll/store.ts","index.tsx"],"names":["SettingsDisplay","props","className","type","value","state","maxValue","startValue","onChange","changeMaxValue","changeStartValue","Button","correctIsDisabled","displayValue","onClick","incCounterState","disabled","resetCounterState","Display","style","paddingTop","fontSize","messageDisplaySettings","initialState","status","setStatusValueAC","App","dispatch","useDispatch","useSelector","onClickButton","useEffect","localStorage","getItem","setItem","JSON","stringify","e","currentTarget","resetCounterStateAC","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ead6d443.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\nimport {InitialStateType} from \"./bll/counter-reducer\";\r\n\r\ntype SettingsPropsType = {\r\n    state: InitialStateType\r\n    changeMaxValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changeStartValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onClickButton: () => void\r\n}\r\n\r\nexport function SettingsDisplay(props: SettingsPropsType) {\r\n    return (\r\n        <div>\r\n            <div className='settings-value'>\r\n                <div className='value'>max value:</div>\r\n                <input type={'number'} value={props.state.maxValue}\r\n                    className={props.state.startValue >= 0 && props.state.maxValue >= 0\r\n                    && props.state.startValue < props.state.maxValue ? 'input' : 'error'}\r\n                       onChange={props.changeMaxValue}/>\r\n            </div>\r\n            <div className='settings-value'>\r\n                <div className='value'>start value:</div>\r\n                <input type={'number'} value={props.state.startValue}\r\n                       className={props.state.startValue >= 0 && props.state.maxValue >= 0 &&\r\n                       props.state.startValue < props.state.maxValue ? 'input' : 'error'}\r\n                       onChange={props.changeStartValue}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {InitialStateType} from \"./bll/counter-reducer\";\r\n\r\ntype ButtonPropsType = {\r\n    incCounterState: () => void\r\n    resetCounterState: (startValue: number) => void\r\n    state: InitialStateType\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    const correctIsDisabled =  props.state.startValue === props.state.maxValue ||props.state.displayValue === props.state.maxValue || props.state.maxValue < props.state.startValue\r\n    return (\r\n        <div className='button-counter'>\r\n            <button onClick={props.incCounterState} disabled={correctIsDisabled} className=\"button-inc\">inc</button>\r\n            <button onClick={() => props.resetCounterState(props.state.startValue)} className='button-reset'\r\n                    disabled={props.state.startValue === props.state.maxValue || props.state.maxValue < props.state.startValue}>\r\n                reset\r\n            </button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\nimport {Button} from \"./Button\";\nimport {InitialStateType} from \"./bll/counter-reducer\";\n\ntype CounterPropsType = {\n    incCounterState: () => void;\n    resetCounterState: (startValue: number) => void;\n    messageDisplaySettings: string\n    state: InitialStateType\n}\n\nexport function Display(props: CounterPropsType) {\n    return (\n        <div>\n            <div className='counter'>\n                <div className={props.state.displayValue === props.state.maxValue ? \"disabled\" : \"\"}\n                     style={{paddingTop: \"55px\", fontSize: '50px'}}>{props.state.displayValue || props.messageDisplaySettings }</div>\n            </div>\n            <div className='box-button'>\n                <div className='button-counter'>\n                    <Button incCounterState={props.incCounterState}\n                            resetCounterState={props.resetCounterState}\n                            state={props.state}/>\n                </div>\n            </div>\n        </div>\n    )\n}","\r\ntype IncCounterStateAT = {\r\n    type: \"INC-COUNTER-STATE\"\r\n}\r\n\r\ntype ResetCounterStateAT = {\r\n    type: \"RESET-COUNTER-STATE\"\r\n    startValue: number\r\n}\r\n\r\ntype SetMaxValueAT = {\r\n    type: 'SET-MAX-VALUE'\r\n     maxValue: number\r\n}\r\n\r\ntype SetStartValueAT = {\r\n    type: 'SET-START-VALUE'\r\n    startValue: number\r\n}\r\n\r\ntype SetStatusValueAT = {\r\n    type: \"SET-STATUS-VALUE\"\r\n    status: string\r\n}\r\n\r\ntype OnClickButtonAT = {\r\n    type: \"ON-CLICK-BUTTON\"\r\n    startValue: number\r\n}\r\n\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    displayValue: 0,\r\n    status: \"0\"\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type ActionType = IncCounterStateAT | ResetCounterStateAT  | OnClickButtonAT | SetStartValueAT | SetMaxValueAT | SetStatusValueAT;\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionType ): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"INC-COUNTER-STATE\":\r\n            return {\r\n                ...state, displayValue: state.displayValue + 1\r\n            }\r\n        case \"RESET-COUNTER-STATE\":\r\n            return {\r\n                ...state, displayValue: action.startValue\r\n            }\r\n        case \"SET-MAX-VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        case \"SET-START-VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue,\r\n            }\r\n        case \"SET-STATUS-VALUE\" :\r\n            return {\r\n                ...state,\r\n                status: action.status,\r\n            }\r\n        case \"ON-CLICK-BUTTON\":\r\n            return {...state, displayValue: action.startValue}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setMaxValueAC = (maxValue: number,): SetMaxValueAT => {\r\n    return {type: 'SET-MAX-VALUE', maxValue}\r\n}\r\n\r\nexport const setStartValueAC = (startValue: number): SetStartValueAT => {\r\n    return {type: 'SET-START-VALUE', startValue}\r\n}\r\n\r\nexport const incCounterStateAC = (): IncCounterStateAT => {\r\n    return {type: \"INC-COUNTER-STATE\"}\r\n}\r\n\r\nexport const resetCounterStateAC = (startValue: number): ResetCounterStateAT => {\r\n    return {type: \"RESET-COUNTER-STATE\", startValue}\r\n}\r\n\r\nexport let setDisplayValue = (startValue: number): OnClickButtonAT => {\r\n    return {type: \"ON-CLICK-BUTTON\", startValue }\r\n}\r\n\r\nexport let setStatusValueAC = (status: string): SetStatusValueAT => {\r\n    return {type: \"SET-STATUS-VALUE\", status }\r\n}\r\n","import React, {ChangeEvent, useEffect} from 'react';\nimport './App.css';\nimport {SettingsDisplay} from \"./SettingsDisplay\";\nimport {Display} from \"./Display\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    incCounterStateAC,\n    InitialStateType,\n    setDisplayValue,\n    resetCounterStateAC, setMaxValueAC, setStartValueAC, setStatusValueAC,\n} from \"./bll/counter-reducer\";\nimport {AppStateType} from \"./bll/store\";\n\n\nfunction App() {\n    const dispatch = useDispatch()\n    let state = useSelector<AppStateType, InitialStateType>(state => state)\n    let messageDisplaySettings = state.status === 'Settings' ? \"Enter values and press 'set'\"  :\n                                 state.status === 'Error' ? 'Incorrect value!': \"0\"\n\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\n            dispatch(setStartValueAC(+e.currentTarget.value))\n         if(state.startValue >= 0 && state.maxValue >= 0 && state.startValue < state.maxValue){\n            return dispatch(setStatusValueAC(\"Settings\"))\n        } else {\n            return dispatch(setStatusValueAC(\"Error\"))\n        }\n    }\n\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setMaxValueAC(+e.currentTarget.value))\n        if( state.maxValue >= 0 && state.startValue <= state.maxValue){\n            return dispatch(setStatusValueAC(\"Settings\"))\n        } else {\n            return dispatch(setStatusValueAC(\"Error\"))\n        }\n    };\n\n    const incCounterState = () => {\n         dispatch(incCounterStateAC())\n    }\n\n    const resetCounterState = (startValue: number) => {\n        dispatch(resetCounterStateAC(startValue))\n    }\n\n    const onClickButton = () => {\n        dispatch(setDisplayValue(state.startValue))\n    }\n\n    useEffect(() => {\n        let maxValueString = localStorage.getItem('maxValue')\n        let startValueString = localStorage.getItem('startValue')\n        let valueString = localStorage.getItem('displayValue')\n\n        if (maxValueString && startValueString && valueString) {\n            // dispatch(setMaxValueAC(JSON.parse(maxValueString)))\n            // dispatch(setStartValueAC(JSON.parse(startValueString)))\n            // dispatch(setDisplayValue(JSON.parse(valueString)))\n        }\n    }, [dispatch])\n\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(state.maxValue))\n        localStorage.setItem('startValue', JSON.stringify(state.startValue))\n        localStorage.setItem('displayValue', JSON.stringify(state.displayValue))\n    }, [state])\n\n    return (\n        <div className=\"App\">\n            <div className='counter-box'>\n                <div className='counter'>\n                    <div className='block-settings'>\n                        <SettingsDisplay\n                            changeMaxValue={changeMaxValue}\n                            changeStartValue={changeStartValue}\n                            onClickButton={onClickButton}\n                            state={state}\n                        />\n                    </div>\n                </div>\n                <div className='block-button'>\n                    <button onClick={onClickButton}\n                            disabled={state.maxValue === state.startValue || state.startValue < 0 || state.maxValue < state.startValue}\n                            className='button-set'>set\n                    </button>\n                </div>\n            </div>\n            <div className='counter-box'>\n                <Display\n                    messageDisplaySettings={messageDisplaySettings}\n                    incCounterState={incCounterState}\n                    resetCounterState={resetCounterState}\n                    state={state}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createStore} from \"redux\";\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\nexport type AppStateType = ReturnType<typeof counterReducer>\r\n\r\nexport const store = createStore(counterReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}